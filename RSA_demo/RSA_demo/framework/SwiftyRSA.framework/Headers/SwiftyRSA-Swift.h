// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class PublicKey;
@class EncryptedMessage;
@class PrivateKey;
enum DigestType : NSInteger;
@class Signature;
@class VerificationResult;

SWIFT_CLASS("_TtC9SwiftyRSA12ClearMessage")
@interface ClearMessage : NSObject
/**
  Data of the message
*/
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/**
  Base64-encoded string of the message data
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull base64String;
/**
  Creates a clear message with data.
  \param data Data of the clear message

*/
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a clear message from a string, with the specified encoding.
  \param string String value of the clear message

  \param rawEncoding Encoding to use to generate the clear data


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithString:(NSString * _Nonnull)string using:(NSUInteger)rawEncoding error:(NSError * _Nullable * _Nullable)error;
/**
  Creates a clear message from a base64-encoded string.
  \param base64String Base64-encoded string of the message data


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithBase64Encoded:(NSString * _Nonnull)base64String error:(NSError * _Nullable * _Nullable)error;
/**
  Encrypts a clear message with a public key and returns an encrypted message.
  \param key Public key to encrypt the clear message with

  \param padding Padding to use during the encryption


  throws:
  SwiftyRSAError

  returns:
  Encrypted message
*/
- (EncryptedMessage * _Nullable)encryptedWith:(PublicKey * _Nonnull)key padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error;
/**
  Signs a clear message using a private key.
  The clear message will first be hashed using the specified digest type, then signed
  using the provided private key.
  \param key Private key to sign the clear message with

  \param digestType Digest


  throws:
  SwiftyRSAError

  returns:
  Signature of the clear message after signing it with the specified digest type.
*/
- (Signature * _Nullable)signedWith:(PrivateKey * _Nonnull)key digestType:(enum DigestType)digestType error:(NSError * _Nullable * _Nullable)error;
/**
  Verifies the signature of a clear message.
  \param key Public key to verify the signature with

  \param signature Signature to verify

  \param digestType Digest type used for the signature


  throws:
  SwiftyRSAError

  returns:
  Result of the verification
*/
- (VerificationResult * _Nullable)verifyWith:(PublicKey * _Nonnull)key signature:(Signature * _Nonnull)signature digestType:(enum DigestType)digestType error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9SwiftyRSA16EncryptedMessage")
@interface EncryptedMessage : NSObject
/**
  Data of the message
*/
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/**
  Base64-encoded string of the message data
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull base64String;
/**
  Creates an encrypted message with data.
  \param data Data of the encrypted message.

*/
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
/**
  Creates an encrypted message with a base64-encoded string.
  \param base64String Base64-encoded data of the encrypted message


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithBase64Encoded:(NSString * _Nonnull)base64String error:(NSError * _Nullable * _Nullable)error;
/**
  Decrypts an encrypted message with a private key and returns a clear message.
  \param key Private key to decrypt the mssage with

  \param padding Padding to use during the decryption


  throws:
  SwiftyRSAError

  returns:
  Clear message
*/
- (ClearMessage * _Nullable)decryptedWith:(PrivateKey * _Nonnull)key padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSBundle;

SWIFT_CLASS("_TtC9SwiftyRSA10PrivateKey")
@interface PrivateKey : NSObject
/**
  Reference to the key within the keychain
*/
@property (nonatomic, readonly) SecKeyRef _Nonnull reference;
/**
  Tag of the key within the keychain
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull tag;
/**
  Original data of the private key.
  Note that it does not contain PEM headers and holds data as bytes, not as a base 64 string.
*/
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/**
  Creates a private key with a RSA public key data.
  \param data Private key data


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a private key with a base64-encoded string.
  \param base64String Base64-encoded private key data


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithBase64Encoded:(NSString * _Nonnull)base64String error:(NSError * _Nullable * _Nullable)error;
/**
  Creates a private key with a PEM string.
  \param pemString PEM-encoded private key string


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithPemEncoded:(NSString * _Nonnull)pemString error:(NSError * _Nullable * _Nullable)error;
/**
  Creates a private key with a PEM file.
  \param pemName Name of the PEM file

  \param bundle Bundle in which to look for the PEM file. Defaults to the main bundle.


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithPemNamed:(NSString * _Nonnull)pemName in:(NSBundle * _Nonnull)bundle error:(NSError * _Nullable * _Nullable)error;
/**
  Creates a private key with a DER file.
  \param derName Name of the DER file

  \param bundle Bundle in which to look for the DER file. Defaults to the main bundle.


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithDerNamed:(NSString * _Nonnull)derName in:(NSBundle * _Nonnull)bundle error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9SwiftyRSA9PublicKey")
@interface PublicKey : NSObject
/**
  Reference to the key within the keychain
*/
@property (nonatomic, readonly) SecKeyRef _Nonnull reference;
/**
  Tag of the key within the keychain
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull tag;
/**
  Data of the public key without a x509 header.
  Since SwiftyRSA strips public key headers, \code
  key.data
  \endcode might be different then \code
  key.dataWithoutHeader
  \endcode.
*/
@property (nonatomic, readonly, copy) NSData * _Nonnull dataWithoutHeader;
/**
  Data of the public key as provided when creating the key.
  Note that it does not contain PEM headers and holds data as bytes, not as a base 64 string.
*/
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/**
  Creates a public with a RSA public key data.
  \param data Public key data


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a public key with a base64-encoded string.
  \param base64String Base64-encoded public key data


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithBase64Encoded:(NSString * _Nonnull)base64String error:(NSError * _Nullable * _Nullable)error;
/**
  Creates a public key with a PEM string.
  \param pemString PEM-encoded public key string


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithPemEncoded:(NSString * _Nonnull)pemString error:(NSError * _Nullable * _Nullable)error;
/**
  Creates a public key with a PEM file.
  \param pemName Name of the PEM file

  \param bundle Bundle in which to look for the PEM file. Defaults to the main bundle.


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithPemNamed:(NSString * _Nonnull)pemName in:(NSBundle * _Nonnull)bundle error:(NSError * _Nullable * _Nullable)error;
/**
  Creates a private key with a DER file.
  \param derName Name of the DER file

  \param bundle Bundle in which to look for the DER file. Defaults to the main bundle.


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithDerNamed:(NSString * _Nonnull)derName in:(NSBundle * _Nonnull)bundle error:(NSError * _Nullable * _Nullable)error;
/**
  Takes an input string, scans for public key sections, and then returns a PublicKey for any valid keys found
  <ul>
    <li>
      This method scans the file for public key armor - if no keys are found, an empty array is returned
    </li>
    <li>
      Each public key block found is “parsed” by \code
      publicKeyFromPEMString()
      \endcode
    </li>
    <li>
      should that method throw, the error is <em>swallowed</em> and not rethrown
    </li>
  </ul>
  \param pemString The string to use to parse out values


  returns:
  An array of \code
  PublicKey
  \endcode objects
*/
+ (NSArray<PublicKey *> * _Nonnull)publicKeysWithPemEncoded:(NSString * _Nonnull)pemString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9SwiftyRSA9Signature")
@interface Signature : NSObject
/**
  Data of the signature
*/
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/**
  Creates a signature with data.
  \param data Data of the signature

*/
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a signature with a base64-encoded string.
  \param base64String Base64-encoded representation of the signature data.


  throws:
  SwiftyRSAError
*/
- (nullable instancetype)initWithBase64Encoded:(NSString * _Nonnull)base64String error:(NSError * _Nullable * _Nullable)error;
/**
  Returns the base64 representation of the signature.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull base64String;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, DigestType) {
  DigestTypeSha1 = 0,
  DigestTypeSha224 = 1,
  DigestTypeSha256 = 2,
  DigestTypeSha384 = 3,
  DigestTypeSha512 = 4,
};


SWIFT_CLASS("_TtC9SwiftyRSA18VerificationResult")
@interface VerificationResult : NSObject
@property (nonatomic, readonly) BOOL isSuccessful;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
